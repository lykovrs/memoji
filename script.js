function memoji(
  rootElement,
  timerElement,
  classCard,
  openCardClass,
  timeRound,
) {
  var emojies = [
    { icon: "ü¶Ä", ready: false, id: 1 },
    { icon: "ü¶Ä", ready: false, id: 2 },
    { icon: "üêü", ready: false, id: 3 },
    { icon: "üêü", ready: false, id: 4 },
    { icon: "üêä", ready: false, id: 5 },
    { icon: "üêä", ready: false, id: 6 },
    { icon: "üêì", ready: false, id: 7 },
    { icon: "üêì", ready: false, id: 8 },
    { icon: "ü¶É", ready: false, id: 9 },
    { icon: "ü¶É", ready: false, id: 10 },
    { icon: "üêø", ready: false, id: 11 },
    { icon: "üêø", ready: false, id: 12 },
  ];
  // –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
  var timeCounter = 0;
  // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–º–æ–¥–∂–∏
  emojies = shuffle(emojies);
  // –ì–æ—Ç–æ–≤–∏–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
  var element = document.createElement("article");
  element.dataset.card = "";
  element.classList.add(classCard);
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  emojies.forEach(function(item) {
    var newItem = element.cloneNode(false);
    newItem.dataset.emoji = item.icon;
    newItem.dataset.emojiId = item.id;
    rootElement.appendChild(newItem);
  });
  var prevControl = element;
  // –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫
  rootElement.addEventListener("click", function(ev) {
    var control = ev.target;

    // –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã-–∫–∞—Ä—Ç–æ—á–∫–∏
    if ("card" in control.dataset) {
      var currentId = control.dataset.emojiId;
      var currentIcon = control.dataset.emoji;
      var prevId = prevControl.dataset.emojiId;
      var prevIcon = prevControl.dataset.emoji;

      // –µ—Å–ª–∏ –ø–∞—Ä–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if ("ready" in control.dataset) return;

      // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∫–∞—Ä—Ç–æ—á–∫–µ
      if (prevId === currentId) return;

      // –∫–ª–∏–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏–º –∏–∫–æ–Ω–∫–∞–º–∏
      if (currentIcon !== prevIcon) {
        cardClose(prevControl, openCardClass);
        cardOpen(control, openCardClass);
      }

      // –∫–ª–∏–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –∏–∫–æ–Ω–∫–æ–π
      if (currentIcon === prevIcon) {
        cardOpen(control, openCardClass);
        control.dataset.ready = true;
        prevControl.dataset.ready = true;
        prevControl = element;
        return;
      }

      console.log("result", calculateResult(emojies));
      prevControl = control;
      // cardOpen(control, openCardClass)
    }
  });

  // –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã
  tick(
    function() {
      renderTime(timerElement, timeCounter);
    },
    function() {
      console.log("ready!!!");
    },
    timeRound,
  );

  /**
   * –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
   * @param array –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
   * @returns {*}
   */
  function shuffle(array) {
    var currentIndex = array.length,
      temporaryValue,
      randomIndex;

    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;

      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }

    return array;
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
   * @param iterationCallback –∫–æ–ª–±–µ–∫ –Ω–∞ –∫–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
   * @param readyCallback –∫–æ–ª–±–µ–∫ –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
   * @param iterations –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤—ã–∑–æ–≤–∞
   */
  function tick(iterationCallback, readyCallback, iterations) {
    setTimeout(function() {
      timeCounter += 1;
      iterationCallback();
      if (timeCounter <= iterations)
        tick(iterationCallback, readyCallback, iterations);
      else readyCallback();
    }, 1000);
  }

  function renderTime(element, time) {
    element.innerHTML = "00-" + (+time < 10 ? "0" + time : time);
  }

  function cardOpen(card, openCardClass) {
    card.classList.add(openCardClass);
  }

  function cardClose(card, openCardClass) {
    card.classList.remove(openCardClass);
  }

  // function makeMove(prevId, currentId) {
  //
  // }

  function calculateResult(arr) {
    return arr.every(function(item) {
      return item.ready;
    });
  }
}
