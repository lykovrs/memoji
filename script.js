function Game(options) {
  // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—ã
  this._emojies = this.generateCouple(["ü¶Ä", "üêü", "üêä", "üêì", "ü¶É", "üêø"]);
  // –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
  this._timeCounter = 0;
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
  this.mixCards(this._emojies);
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  this._collection = this._emojies.map(function(item) {
    var element = document.createElement("article");
    element.dataset.card = "";
    element.classList.add(options.classCard);
    element.dataset.emoji = item.icon;
    element.dataset.emojiId = item.id;
    options.rootElement.appendChild(element);
    return element;
  });
  // –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ö–æ—Ç—è–±—ã –ø–æ—Å–ª–µ–¥–Ω–µ —Ç—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ö–æ–¥–∞
  this._history = {
    first: null,
    second: null,
    third: null,
  };

  // –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫
  options.rootElement.addEventListener(
    "click",
    function(ev) {
      var history = this._history;
      // –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã-–∫–∞—Ä—Ç–æ—á–∫–∏
      if ("card" in ev.target.dataset) {
        var control = ev.target;
        var id = control.dataset.emojiId;

        // –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –æ—Ç—ã–≥—Ä–∞–Ω–∞, –Ω–µ  —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–∫
        if (control.classList.contains(options.roundSuccessClass)) return;

        // –ø–æ–≤—Ç–æ—Ä—ã–Ω–π –∫–ª–∏–∫ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
        if (control === history.first || control === history.second) {
          // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫—Ä–∞—Ç—É
          this.cardClose(control, options.openCardClass);
          // –æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
          if (control === history.first) {
            // —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω–¥—Ä–æ–ª–∞
            history.first.classList.remove(options.roundErrorClass);

            if (history.second) {
              // —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∞
              history.second.classList.remove(options.roundErrorClass);
              history.first = history.second;
              history.second = null;
            } else {
              history.first = null;
            }
          }

          if (control === history.second) {
            // —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            history.first.classList.remove(options.roundErrorClass);
            history.second.classList.remove(options.roundErrorClass);
            history.second = null;
          }
          return;
        }

        // –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞
        if (history.first && history.second) {
          // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
          if (
            !this.calculateMove(
              history.first.dataset.emojiId,
              history.second.dataset.emojiId,
            )
          ) {
            history.first.classList.remove(options.roundErrorClass);
            history.second.classList.remove(options.roundErrorClass);
            this.cardClose(history.first, options.openCardClass);
            this.cardClose(history.second, options.openCardClass);
          }
          // —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å
          history.first = null;
          history.second = null;
        }

        // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        if (!history.first && !history.second) {
          // —Å–æ—Ö–æ—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
          history.first = control;
          // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
          this.cardOpen(control, options.openCardClass);
          return;
        }

        if (history.first && !history.second) {
          // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          history.second = control;
          // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
          this.cardOpen(control, options.openCardClass);
          // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
          if (
            this.calculateMove(
              history.first.dataset.emojiId,
              history.second.dataset.emojiId,
            )
          ) {
            // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —É—Å–ø–µ—Ö
            history.first.classList.add(options.roundSuccessClass);
            history.second.classList.add(options.roundSuccessClass);
          } else {
            // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
            history.first.classList.add(options.roundErrorClass);
            history.second.classList.add(options.roundErrorClass);
          }
          return;
        }

        console.log(history);
      }
    }.bind(this),
  );
}

/**
 * –í—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ id
 * @param firsId id –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param secondId id –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @returns {boolean}
 */
Game.prototype.calculateMove = function(firsId, secondId) {
  var currentEmojies = this._emojies.filter(function(item) {
    return item.id === firsId || item.id == secondId;
  });

  if (currentEmojies.length === 2) {
    var firsIcon = currentEmojies[0].icon;
    var secondIcon = currentEmojies[1].icon;
    return firsIcon === secondIcon && firsId !== secondId;
  }

  return false;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Å—Å–∏–≤ —Å –ø–∞—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã
 * @param arr –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å —ç–º–æ–¥–∂–∏
 * @returns {*} –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Emoji
 */
Game.prototype.generateCouple = function(arr) {
  return arr.reduce(function(previousValue, currentValue, currentIndex) {
    return previousValue.concat([
      new Emoji(currentValue, "first-" + currentIndex),
      new Emoji(currentValue, "second-" + currentIndex),
    ]);
  }, []);
};

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
 * @param array –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
 * @returns {*}
 */
Game.prototype.mixCards = function(array) {
  var currentIndex = array.length,
    temporaryValue,
    randomIndex;

  while (0 !== currentIndex) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É
 * @param card —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
 * @param openCardClass –¥–æ–±–∞–≤–ª—è–µ–º—ã –∫–ª–∞—Å—Å
 */
Game.prototype.cardOpen = function(card, openCardClass) {
  card.classList.add(openCardClass);
};

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É
 * @param card —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
 * @param openCardClass —É–¥–∞–ª—è–µ–º—ã–π –∫–ª–∞—Å—Å
 */
Game.prototype.cardClose = function(card, openCardClass) {
  card.classList.remove(openCardClass);
};

/**
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—É—â—å–Ω–æ—Å—Ç–∏ Emoji
 * @param icon —Å—Ç—Ä–æ–∫–∞-–∏–∫–æ–Ω–∫–∞
 * @param id –∏–¥–µ–Ω—Ç–∏–≤–∏–∫–∞—Ç–æ—Ä
 * @constructor
 */
function Emoji(icon, id) {
  this.icon = icon;
  this.id = id;
}
